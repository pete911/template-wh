#!/bin/sh
TWH_NAME="template-wh"
TWH_NAMESPACE="kube-system"
SCRIPTPATH="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

echo " --- [start minikube] ---"
minikube start

if [ $(kubectl config current-context) != "minikube" ]
then
  echo "kubectl context is not set to minikube"
  exit 1
fi

eval $(minikube -p minikube docker-env)
# install cert-manager
kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.0.4/cert-manager.yaml

# install template-wh chart
docker build -t pete911/template-wh:test "$SCRIPTPATH"/..
helm install template-wh "$SCRIPTPATH"/../charts/template-wh \
  --namespace kube-system \
  --set image=pete911/template-wh:test \
  --wait

# install test webhook and configmap
helm install pod-wh "$SCRIPTPATH"/charts/pod-wh \
  --namespace kube-system \
  --wait

# run tests
TEST_RESULT=0

# create pod with placeholder and check if it has been replaced ($cluster -> 'minikube')
kubectl create -n kube-system -f "$SCRIPTPATH"/pod-placeholders.yaml
CLUSTER_LABEL=$(kubectl get pod -n kube-system -l app.kubernetes.io/name=pod-placeholders -o=jsonpath='{.items[0].spec.containers[0].name}')
echo "$CLUSTER_LABEL"
if [ "$CLUSTER_LABEL" = "minikube" ]; then
  echo "OK"
else
  echo "FAIL"
  TEST_RESULT=1
fi

# create pod without placeholder and check it has not been replaced
kubectl create -n kube-system -f "$SCRIPTPATH"/pod-no-placeholders.yaml
CLUSTER_LABEL=$(kubectl get pod -n kube-system -l app.kubernetes.io/name=pod-no-placeholders -o=jsonpath='{.items[0].spec.containers[0].name}')
echo "$CLUSTER_LABEL"
if [ "$CLUSTER_LABEL" = "test" ]; then
  echo "OK"
else
  echo "FAIL"
  TEST_RESULT=1
fi

kubectl delete pod -n kube-system -l app.kubernetes.io/name=pod-placeholders
kubectl delete pod -n kube-system -l app.kubernetes.io/name=pod-no-placeholders
helm delete pod-wh -n kube-system
helm delete template-wh -n kube-system
exit "$TEST_RESULT"
